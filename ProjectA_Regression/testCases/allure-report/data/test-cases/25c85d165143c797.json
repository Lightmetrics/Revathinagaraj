{"uid":"25c85d165143c797","name":"test_run_reports_page","fullName":"test_Suite_Controller.TestSuiteController#test_run_reports_page","historyId":"bdd1ec525b5d3059b084b55b160fcd0b","time":{"start":1753860304236,"stop":1753860305373,"duration":1137},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a _ngcontent-kpw-c386=\"\" color=\"primary\" mat-list-item=\"\" routerlinkactive=\"active\" class=\"mat-list-item mat-focus-indicator nav-item ng-star-inserted\" href=\"/reports\" style=\"\">...</a> is not clickable at point (110, 492). Other element would receive the click: <div class=\"cdk-overlay-backdrop cdk-overlay-transparent-backdrop cdk-overlay-backdrop-showing\"></div>\n  (Session info: chrome=130.0.6723.69)\nStacktrace:\n#0 0x5baf07edd6da <unknown>\n#1 0x5baf079f1f80 <unknown>\n#2 0x5baf07a456e6 <unknown>\n#3 0x5baf07a4366d <unknown>\n#4 0x5baf07a41117 <unknown>\n#5 0x5baf07a40531 <unknown>\n#6 0x5baf07a33b28 <unknown>\n#7 0x5baf07a62bb2 <unknown>\n#8 0x5baf07a33508 <unknown>\n#9 0x5baf07a62d7e <unknown>\n#10 0x5baf07a8169d <unknown>\n#11 0x5baf07a62953 <unknown>\n#12 0x5baf07a3172e <unknown>\n#13 0x5baf07a3279e <unknown>\n#14 0x5baf07ea8f1b <unknown>\n#15 0x5baf07eaceb8 <unknown>\n#16 0x5baf07e9642c <unknown>\n#17 0x5baf07eada37 <unknown>\n#18 0x5baf07e7afef <unknown>\n#19 0x5baf07ecbad8 <unknown>\n#20 0x5baf07ecbca0 <unknown>\n#21 0x5baf07edc556 <unknown>\n#22 0x79e36409caa4 <unknown>\n#23 0x79e364129c3c <unknown>","statusTrace":"self = <ProjectA_Regression.testCases.test_Suite_Controller.TestSuiteController object at 0x7d20f4ba5880>\n\n    @pytest.mark.order(12)\n    def test_run_reports_page(self):\n        log = self.getLogger()\n        log.info(\"===== Suite Controller: Fleet Reports Page =====\")\n    \n        reports = Fleet_ReportsPage_Test()\n        reports.driver = self.driver\n>       reports.test_reports_page()\n\ntest_Suite_Controller.py:183: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_F_9_ReportsPage.py:14: in test_reports_page\n    reports_page_status = reports_page.validate_reports_page(log)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../pageObjects/F_9_ReportsPage.py:26: in validate_reports_page\n    reports_page1.click()\n../../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:574: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7d20f5e72ab0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x5baf07edc556 \\\\u003Cunknown>\\\\n#22 0x79e36409caa4 \\\\u003Cunknown>\\\\n#23 0x79e364129c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a _ngcontent-kpw-c386=\"\" color=\"primary\" mat-list-item=\"\" routerlinkactive=\"active\" class=\"mat-list-item mat-focus-indicator nav-item ng-star-inserted\" href=\"/reports\" style=\"\">...</a> is not clickable at point (110, 492). Other element would receive the click: <div class=\"cdk-overlay-backdrop cdk-overlay-transparent-backdrop cdk-overlay-backdrop-showing\"></div>\nE         (Session info: chrome=130.0.6723.69)\nE       Stacktrace:\nE       #0 0x5baf07edd6da <unknown>\nE       #1 0x5baf079f1f80 <unknown>\nE       #2 0x5baf07a456e6 <unknown>\nE       #3 0x5baf07a4366d <unknown>\nE       #4 0x5baf07a41117 <unknown>\nE       #5 0x5baf07a40531 <unknown>\nE       #6 0x5baf07a33b28 <unknown>\nE       #7 0x5baf07a62bb2 <unknown>\nE       #8 0x5baf07a33508 <unknown>\nE       #9 0x5baf07a62d7e <unknown>\nE       #10 0x5baf07a8169d <unknown>\nE       #11 0x5baf07a62953 <unknown>\nE       #12 0x5baf07a3172e <unknown>\nE       #13 0x5baf07a3279e <unknown>\nE       #14 0x5baf07ea8f1b <unknown>\nE       #15 0x5baf07eaceb8 <unknown>\nE       #16 0x5baf07e9642c <unknown>\nE       #17 0x5baf07eada37 <unknown>\nE       #18 0x5baf07e7afef <unknown>\nE       #19 0x5baf07ecbad8 <unknown>\nE       #20 0x5baf07ecbca0 <unknown>\nE       #21 0x5baf07edc556 <unknown>\nE       #22 0x79e36409caa4 <unknown>\nE       #23 0x79e364129c3c <unknown>\n\n../../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"sensitive_url","time":{"start":1753860085601,"stop":1753860085601,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1753860085601,"stop":1753860085601,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1753860085601,"stop":1753860085601,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"browser_driver","time":{"start":1753860085602,"stop":1753860091205,"duration":5603},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1753860091206,"stop":1753860091206,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_skip_sensitive","time":{"start":1753860304236,"stop":1753860304236,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a _ngcontent-kpw-c386=\"\" color=\"primary\" mat-list-item=\"\" routerlinkactive=\"active\" class=\"mat-list-item mat-focus-indicator nav-item ng-star-inserted\" href=\"/reports\" style=\"\">...</a> is not clickable at point (110, 492). Other element would receive the click: <div class=\"cdk-overlay-backdrop cdk-overlay-transparent-backdrop cdk-overlay-backdrop-showing\"></div>\n  (Session info: chrome=130.0.6723.69)\nStacktrace:\n#0 0x5baf07edd6da <unknown>\n#1 0x5baf079f1f80 <unknown>\n#2 0x5baf07a456e6 <unknown>\n#3 0x5baf07a4366d <unknown>\n#4 0x5baf07a41117 <unknown>\n#5 0x5baf07a40531 <unknown>\n#6 0x5baf07a33b28 <unknown>\n#7 0x5baf07a62bb2 <unknown>\n#8 0x5baf07a33508 <unknown>\n#9 0x5baf07a62d7e <unknown>\n#10 0x5baf07a8169d <unknown>\n#11 0x5baf07a62953 <unknown>\n#12 0x5baf07a3172e <unknown>\n#13 0x5baf07a3279e <unknown>\n#14 0x5baf07ea8f1b <unknown>\n#15 0x5baf07eaceb8 <unknown>\n#16 0x5baf07e9642c <unknown>\n#17 0x5baf07eada37 <unknown>\n#18 0x5baf07e7afef <unknown>\n#19 0x5baf07ecbad8 <unknown>\n#20 0x5baf07ecbca0 <unknown>\n#21 0x5baf07edc556 <unknown>\n#22 0x79e36409caa4 <unknown>\n#23 0x79e364129c3c <unknown>","statusTrace":"self = <ProjectA_Regression.testCases.test_Suite_Controller.TestSuiteController object at 0x7d20f4ba5880>\n\n    @pytest.mark.order(12)\n    def test_run_reports_page(self):\n        log = self.getLogger()\n        log.info(\"===== Suite Controller: Fleet Reports Page =====\")\n    \n        reports = Fleet_ReportsPage_Test()\n        reports.driver = self.driver\n>       reports.test_reports_page()\n\ntest_Suite_Controller.py:183: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_F_9_ReportsPage.py:14: in test_reports_page\n    reports_page_status = reports_page.validate_reports_page(log)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../pageObjects/F_9_ReportsPage.py:26: in validate_reports_page\n    reports_page1.click()\n../../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:574: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7d20f5e72ab0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x5baf07edc556 \\\\u003Cunknown>\\\\n#22 0x79e36409caa4 \\\\u003Cunknown>\\\\n#23 0x79e364129c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a _ngcontent-kpw-c386=\"\" color=\"primary\" mat-list-item=\"\" routerlinkactive=\"active\" class=\"mat-list-item mat-focus-indicator nav-item ng-star-inserted\" href=\"/reports\" style=\"\">...</a> is not clickable at point (110, 492). Other element would receive the click: <div class=\"cdk-overlay-backdrop cdk-overlay-transparent-backdrop cdk-overlay-backdrop-showing\"></div>\nE         (Session info: chrome=130.0.6723.69)\nE       Stacktrace:\nE       #0 0x5baf07edd6da <unknown>\nE       #1 0x5baf079f1f80 <unknown>\nE       #2 0x5baf07a456e6 <unknown>\nE       #3 0x5baf07a4366d <unknown>\nE       #4 0x5baf07a41117 <unknown>\nE       #5 0x5baf07a40531 <unknown>\nE       #6 0x5baf07a33b28 <unknown>\nE       #7 0x5baf07a62bb2 <unknown>\nE       #8 0x5baf07a33508 <unknown>\nE       #9 0x5baf07a62d7e <unknown>\nE       #10 0x5baf07a8169d <unknown>\nE       #11 0x5baf07a62953 <unknown>\nE       #12 0x5baf07a3172e <unknown>\nE       #13 0x5baf07a3279e <unknown>\nE       #14 0x5baf07ea8f1b <unknown>\nE       #15 0x5baf07eaceb8 <unknown>\nE       #16 0x5baf07e9642c <unknown>\nE       #17 0x5baf07eada37 <unknown>\nE       #18 0x5baf07e7afef <unknown>\nE       #19 0x5baf07ecbad8 <unknown>\nE       #20 0x5baf07ecbca0 <unknown>\nE       #21 0x5baf07edc556 <unknown>\nE       #22 0x79e36409caa4 <unknown>\nE       #23 0x79e364129c3c <unknown>\n\n../../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException","steps":[],"attachments":[{"uid":"7ffc865a163b49c7","name":"log","source":"7ffc865a163b49c7.txt","type":"text/plain","size":225}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"browser_driver::0","time":{"start":1753860309644,"stop":1753860309644,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"order(12)"},{"name":"tag","value":"@pytest.mark.usefixtures('setup')"},{"name":"suite","value":"test_Suite_Controller"},{"name":"subSuite","value":"TestSuiteController"},{"name":"host","value":"user-ThinkPad-E14-Gen-4"},{"name":"thread","value":"18498-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_Suite_Controller"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["order(12)","@pytest.mark.usefixtures('setup')"]},"source":"25c85d165143c797.json","parameterValues":[]}