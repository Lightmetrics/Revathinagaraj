{"name": "test_run_full_suite_for_customer[lmqatesting1]", "status": "failed", "statusDetails": {"message": "AssertionError: Test failed for lmqatesting1\nassert False", "trace": "self = <ProjectB_Sanity.testCases.test_Suite_Controller.TestSuiteController object at 0x7ba910889ac0>, config = 'lmqatesting1'\n\n    @pytest.mark.order(1)\n    @pytest.mark.parametrize(\"config\", customer_list)\n    def test_run_full_suite_for_customer(self, config):\n        log = self.getLogger()\n        print(f\"🔆=====@ @ @ Running Full Suite for Customer: (\"+ config +\") @ @ @=====🔆\")\n        log.info(f\"🔆=====@ @ @ Running Full Suite for Customer: {config} @ @ @=====🔆\")\n    \n        try:\n        # Step 1: Admin Portal\n            print(f\"=====@ @ @ 🚪 Running Admin Portal for 🚪: (\"+ config +\") @ @ @=====(1)\")\n            log.info(f\"=====@ @ @ 🚪 Running Admin Portal for 🚪: {config} @ @ @=====(1)\")\n    \n            admin = AdminPortal()\n            admin.driver = self.driver\n            admin.test_admin_login(config)\n            admin.test_customer_selection_and_master_portal(config)\n    \n        # Step 2: Master Portal\n            print(\"\\n\" + \"-\" * 200 + \"\\n\")\n            log.info(\"\\n\" + \"-\" * 200 + \"\\n\")\n            print(f\"=====@ @ @ 🧠 Running Master Portal for 🧠: (\"+ config +\") @ @ @=====(2)\")\n            log.info(f\"=====@ @ @ 🧠 Running Master Portal for 🧠: {config} @ @ @=====(2)\")\n    \n            master = MasterPortal()\n            master.driver = self.driver\n            master.test_validate_master_name()\n            master.test_home_page_version()\n            master.test_account_navigation_and_fleet_dashboard_launch()\n    \n        # Step 3: Fleet Portal\n            print(\"\\n\" + \"-\" * 200 + \"\\n\")\n            log.info(\"\\n\" + \"-\" * 200 + \"\\n\")\n            print(f\"=====@ @ @ 🚛 Running Fleet Portal for 🚛: (\"+ config +\") @ @ @=====(3)\")\n            log.info(f\"=====@ @ @ 🚛 Running Fleet Portal for 🚛: {config} @ @ @=====(3)\")\n    \n            fleet = FleetPortal()\n            fleet.driver = self.driver\n            fleet.test_validate_fleet_name()\n            fleet.test_home_page_version()\n    \n        # Step 4: Validate Fleet Home Page\n            print(\"\\n\" + \"-\" * 200 + \"\\n\")\n            log.info(\"\\n\" + \"-\" * 200 + \"\\n\")\n            print(f\"=====@ @ @ 🏠 Validating Fleet Home Page for 🏠: (\"+ config +\") @ @ @=====(4)\")\n            log.info(f\"=====@ @ @ 🏠 Validating Fleet Home Page for 🏠: {config} @ @ @=====(4)\")\n    \n            home = Fleet_HomePage_Test()\n            home.driver = self.driver\n            home.test_validate_select_date_range()\n            home.test_validate_trips_card_present()\n            home.test_validate_distance_card()\n            home.test_validate_event_per_100_miles_card()\n            home.test_home_page_duration()\n            home.test_home_page_recommended_events()\n            home.test_home_page_top_drivers_card()\n            home.test_home_page_coachable_drivers_card()\n            home.test_home_page_event_summary_card()\n            home.test_home_page_event_trend_card()\n    \n        # Step 5: Validate Safety Events Page\n            print(\"\\n\" + \"-\" * 200 + \"\\n\")\n            log.info(\"\\n\" + \"-\" * 200 + \"\\n\")\n            print(f\"=====@ @ @ 🛡️ Validating Safety Events Page for 🛡️: (\"+ config +\") @ @ @=====(5)\")\n            log.info(f\"=====@ @ @ 🛡️ Validating Safety Events Page for 🛡️: {config} @ @ @=====(5)\")\n    \n            safety = Fleet_SafetyEventsPage_Test()\n            safety.driver = self.driver\n            safety.test_safety_events_page_btn()\n            safety.test_safety_events_page_events_view()\n            safety.test_safety_events_page_filters()\n    \n        # Step 6: Validate Trips Page\n            print(\"\\n\" + \"-\" * 200 + \"\\n\")\n            log.info(\"\\n\" + \"-\" * 200 + \"\\n\")\n            print(f\"=====@ @ @ 🚗 Validating Trips Page for 🚗: (\"+ config +\") @ @ @=====(6)\")\n            log.info(f\"=====@ @ @ 🚗 Validating Trips Page for 🚗: {config} @ @ @=====(6)\")\n    \n            trips = Fleet_TripsPage_Test()\n            trips.driver = self.driver\n            trips.test_trips_page_btn()\n            trips.test_trips_page_trips_tab()\n            trips.test_trips_page_trip_filter_card()\n            trips.test_trips_page_trips_list_table()\n            trips.test_trips_page_bulk_edit()\n            trips.test_trips_page_export_trips()\n            trips.test_trips_page_active_drivers_tab()\n            trips.test_trips_page_manage_tab()\n    \n        # Step 7: Validate Live View Page\n            print(\"\\n\" + \"-\" * 200 + \"\\n\")\n            log.info(\"\\n\" + \"-\" * 200 + \"\\n\")\n            print(f\"=====@ @ @ 📺 Validating Live View Page for 📺: (\"+ config +\") @ @ @=====(7)\")\n            log.info(f\"=====@ @ @ 📺 Validating Live View Page for 📺: {config} @ @ @=====(7)\")\n    \n            live_view = Fleet_LiveViewPage_Test()\n            live_view.driver = self.driver\n            live_view.test_live_view_page_btn()\n    \n        # Step 8: Validate Coaching Page\n            print(\"\\n\" + \"-\" * 200 + \"\\n\")\n            log.info(\"\\n\" + \"-\" * 200 + \"\\n\")\n            print(f\"=====@ @ @ 🏆 Validating Coaching Page for 🏆: (\"+ config +\") @ @ @=====(8)\")\n            log.info(f\"=====@ @ @ 🏆 Validating Coaching Page for 🏆: {config} @ @ @=====(8)\")\n    \n            coaching = Fleet_CoachingPage_Test()\n            coaching.driver = self.driver\n            coaching.test_coaching_page_btn()\n            coaching.test_coaching_page_coachable_drivers_table()\n            coaching.test_coaching_page_completed_coaching_sessions_table()\n    \n        # Step 9: Validate Video Requests Page\n            print(\"\\n\" + \"-\" * 200 + \"\\n\")\n            log.info(\"\\n\" + \"-\" * 200 + \"\\n\")\n            print(f\"=====@ @ @ 🎥 Validating Video Requests Page for 🎥: (\"+ config +\") @ @ @=====(9)\")\n            log.info(f\"=====@ @ @ 🎥 Validating Video Requests Page for 🎥: {config} @ @ @=====(9)\")\n    \n            video_requests = Fleet_VideoRequestsPage_Test()\n            video_requests.driver = self.driver\n            video_requests.test_video_requests_page()\n            video_requests.test_video_requests_page_table()\n            video_requests.test_video_requests_page_video_request()\n            video_requests.test_video_requests_page_filter()\n            video_requests.test_video_requests_page_panic_btn_filter()\n            video_requests.test_video_requests_page_event_on_demand_filter()\n    \n        # Step 10: Validate Drivers Page\n            print(\"\\n\" + \"-\" * 200 + \"\\n\")\n            log.info(\"\\n\" + \"-\" * 200 + \"\\n\")\n            print(f\"=====@ @ @ 👥 Validating Drivers Page for 👥: (\"+ config +\") @ @ @=====(10)\")\n            log.info(f\"=====@ @ @ 👥 Validating Drivers Page for 👥: {config} @ @ @=====(10)\")\n    \n            drivers = Fleet_DriversPage_Test()\n            drivers.driver = self.driver\n            drivers.test_drivers_page()\n            drivers.test_drivers_page_driver_list_table()\n            drivers.test_drivers_page_search_driver_opt()\n            drivers.test_drivers_page_batch_update_btn()\n            drivers.test_drivers_page_export_button()\n            drivers.test_drivers_page_add_images_option()  # Data related\n            drivers.test_drivers_page_verify_driver_name()   # Create new data\n            drivers.test_drivers_page_check_box_validation()\n            drivers.test_drivers_page_installers_tab()\n    \n        # Step 11: Validate Challenges Page\n            print(\"\\n\" + \"-\" * 200 + \"\\n\")\n            log.info(\"\\n\" + \"-\" * 200 + \"\\n\")\n            print(f\"=====@ @ @ 🏅 Validating Challenges Page for 🏅: (\"+ config +\") @ @ @=====(11)\")\n            log.info(f\"=====@ @ @ 🏅 Validating Challenges Page for 🏅: {config} @ @ @=====(11)\")\n    \n            challenges = Fleet_ChallengesPage_Test()\n            challenges.driver = self.driver\n            challenges.test_challenges_page()\n            challenges.test_challenges_page_challenged_events_table()\n    \n        # Step 12: Validate Reports Page\n            print(\"\\n\" + \"-\" * 200 + \"\\n\")\n            log.info(\"\\n\" + \"-\" * 200 + \"\\n\")\n            print(f\"=====@ @ @ 📊 Validating Reports Page for 📊: (\"+ config +\") @ @ @=====(12)\")\n            log.info(f\"=====@ @ @ 📊 Validating Reports Page for 📊: {config} @ @ @=====(12)\")\n    \n            reports = Fleet_ReportsPage_Test()\n            reports.driver = self.driver\n            reports.test_reports_page()\n>           reports.test_reports_page_fleet_safety_view_report()\n\ntest_Suite_Controller.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_F_9_ReportsPage.py:27: in test_reports_page_fleet_safety_view_report\n    fleet_safety_report_status = reports_page.validate_reports_page_fleet_safety_view_report(log)\n                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../pageObjects/F_9_ReportsPage.py:45: in validate_reports_page_fleet_safety_view_report\n    fleet_safety_report1 = WebDriverWait(self.driver, 20).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"e932cbfb786c1003ced117d0b0db2595\")>, method = <function visibility_of_element_located.<locals>._predicate at 0x7ba90fec4360>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x640470f186da <unknown>\nE       #1 0x640470a2cf80 <unknown>\nE       #2 0x640470a79b46 <unknown>\nE       #3 0x640470a79de1 <unknown>\nE       #4 0x640470abf174 <unknown>\nE       #5 0x640470a9dbdd <unknown>\nE       #6 0x640470abc69d <unknown>\nE       #7 0x640470a9d953 <unknown>\nE       #8 0x640470a6c72e <unknown>\nE       #9 0x640470a6d79e <unknown>\nE       #10 0x640470ee3f1b <unknown>\nE       #11 0x640470ee7eb8 <unknown>\nE       #12 0x640470ed142c <unknown>\nE       #13 0x640470ee8a37 <unknown>\nE       #14 0x640470eb5fef <unknown>\nE       #15 0x640470f06ad8 <unknown>\nE       #16 0x640470f06ca0 <unknown>\nE       #17 0x640470f17556 <unknown>\nE       #18 0x7f2cece9caa4 <unknown>\nE       #19 0x7f2cecf29c3c <unknown>\n\n../../.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <ProjectB_Sanity.testCases.test_Suite_Controller.TestSuiteController object at 0x7ba910889ac0>, config = 'lmqatesting1'\n\n    @pytest.mark.order(1)\n    @pytest.mark.parametrize(\"config\", customer_list)\n    def test_run_full_suite_for_customer(self, config):\n        log = self.getLogger()\n        print(f\"🔆=====@ @ @ Running Full Suite for Customer: (\"+ config +\") @ @ @=====🔆\")\n        log.info(f\"🔆=====@ @ @ Running Full Suite for Customer: {config} @ @ @=====🔆\")\n    \n        try:\n        # Step 1: Admin Portal\n            print(f\"=====@ @ @ 🚪 Running Admin Portal for 🚪: (\"+ config +\") @ @ @=====(1)\")\n            log.info(f\"=====@ @ @ 🚪 Running Admin Portal for 🚪: {config} @ @ @=====(1)\")\n    \n            admin = AdminPortal()\n            admin.driver = self.driver\n            admin.test_admin_login(config)\n            admin.test_customer_selection_and_master_portal(config)\n    \n        # Step 2: Master Portal\n            print(\"\\n\" + \"-\" * 200 + \"\\n\")\n            log.info(\"\\n\" + \"-\" * 200 + \"\\n\")\n            print(f\"=====@ @ @ 🧠 Running Master Portal for 🧠: (\"+ config +\") @ @ @=====(2)\")\n            log.info(f\"=====@ @ @ 🧠 Running Master Portal for 🧠: {config} @ @ @=====(2)\")\n    \n            master = MasterPortal()\n            master.driver = self.driver\n            master.test_validate_master_name()\n            master.test_home_page_version()\n            master.test_account_navigation_and_fleet_dashboard_launch()\n    \n        # Step 3: Fleet Portal\n            print(\"\\n\" + \"-\" * 200 + \"\\n\")\n            log.info(\"\\n\" + \"-\" * 200 + \"\\n\")\n            print(f\"=====@ @ @ 🚛 Running Fleet Portal for 🚛: (\"+ config +\") @ @ @=====(3)\")\n            log.info(f\"=====@ @ @ 🚛 Running Fleet Portal for 🚛: {config} @ @ @=====(3)\")\n    \n            fleet = FleetPortal()\n            fleet.driver = self.driver\n            fleet.test_validate_fleet_name()\n            fleet.test_home_page_version()\n    \n        # Step 4: Validate Fleet Home Page\n            print(\"\\n\" + \"-\" * 200 + \"\\n\")\n            log.info(\"\\n\" + \"-\" * 200 + \"\\n\")\n            print(f\"=====@ @ @ 🏠 Validating Fleet Home Page for 🏠: (\"+ config +\") @ @ @=====(4)\")\n            log.info(f\"=====@ @ @ 🏠 Validating Fleet Home Page for 🏠: {config} @ @ @=====(4)\")\n    \n            home = Fleet_HomePage_Test()\n            home.driver = self.driver\n            home.test_validate_select_date_range()\n            home.test_validate_trips_card_present()\n            home.test_validate_distance_card()\n            home.test_validate_event_per_100_miles_card()\n            home.test_home_page_duration()\n            home.test_home_page_recommended_events()\n            home.test_home_page_top_drivers_card()\n            home.test_home_page_coachable_drivers_card()\n            home.test_home_page_event_summary_card()\n            home.test_home_page_event_trend_card()\n    \n        # Step 5: Validate Safety Events Page\n            print(\"\\n\" + \"-\" * 200 + \"\\n\")\n            log.info(\"\\n\" + \"-\" * 200 + \"\\n\")\n            print(f\"=====@ @ @ 🛡️ Validating Safety Events Page for 🛡️: (\"+ config +\") @ @ @=====(5)\")\n            log.info(f\"=====@ @ @ 🛡️ Validating Safety Events Page for 🛡️: {config} @ @ @=====(5)\")\n    \n            safety = Fleet_SafetyEventsPage_Test()\n            safety.driver = self.driver\n            safety.test_safety_events_page_btn()\n            safety.test_safety_events_page_events_view()\n            safety.test_safety_events_page_filters()\n    \n        # Step 6: Validate Trips Page\n            print(\"\\n\" + \"-\" * 200 + \"\\n\")\n            log.info(\"\\n\" + \"-\" * 200 + \"\\n\")\n            print(f\"=====@ @ @ 🚗 Validating Trips Page for 🚗: (\"+ config +\") @ @ @=====(6)\")\n            log.info(f\"=====@ @ @ 🚗 Validating Trips Page for 🚗: {config} @ @ @=====(6)\")\n    \n            trips = Fleet_TripsPage_Test()\n            trips.driver = self.driver\n            trips.test_trips_page_btn()\n            trips.test_trips_page_trips_tab()\n            trips.test_trips_page_trip_filter_card()\n            trips.test_trips_page_trips_list_table()\n            trips.test_trips_page_bulk_edit()\n            trips.test_trips_page_export_trips()\n            trips.test_trips_page_active_drivers_tab()\n            trips.test_trips_page_manage_tab()\n    \n        # Step 7: Validate Live View Page\n            print(\"\\n\" + \"-\" * 200 + \"\\n\")\n            log.info(\"\\n\" + \"-\" * 200 + \"\\n\")\n            print(f\"=====@ @ @ 📺 Validating Live View Page for 📺: (\"+ config +\") @ @ @=====(7)\")\n            log.info(f\"=====@ @ @ 📺 Validating Live View Page for 📺: {config} @ @ @=====(7)\")\n    \n            live_view = Fleet_LiveViewPage_Test()\n            live_view.driver = self.driver\n            live_view.test_live_view_page_btn()\n    \n        # Step 8: Validate Coaching Page\n            print(\"\\n\" + \"-\" * 200 + \"\\n\")\n            log.info(\"\\n\" + \"-\" * 200 + \"\\n\")\n            print(f\"=====@ @ @ 🏆 Validating Coaching Page for 🏆: (\"+ config +\") @ @ @=====(8)\")\n            log.info(f\"=====@ @ @ 🏆 Validating Coaching Page for 🏆: {config} @ @ @=====(8)\")\n    \n            coaching = Fleet_CoachingPage_Test()\n            coaching.driver = self.driver\n            coaching.test_coaching_page_btn()\n            coaching.test_coaching_page_coachable_drivers_table()\n            coaching.test_coaching_page_completed_coaching_sessions_table()\n    \n        # Step 9: Validate Video Requests Page\n            print(\"\\n\" + \"-\" * 200 + \"\\n\")\n            log.info(\"\\n\" + \"-\" * 200 + \"\\n\")\n            print(f\"=====@ @ @ 🎥 Validating Video Requests Page for 🎥: (\"+ config +\") @ @ @=====(9)\")\n            log.info(f\"=====@ @ @ 🎥 Validating Video Requests Page for 🎥: {config} @ @ @=====(9)\")\n    \n            video_requests = Fleet_VideoRequestsPage_Test()\n            video_requests.driver = self.driver\n            video_requests.test_video_requests_page()\n            video_requests.test_video_requests_page_table()\n            video_requests.test_video_requests_page_video_request()\n            video_requests.test_video_requests_page_filter()\n            video_requests.test_video_requests_page_panic_btn_filter()\n            video_requests.test_video_requests_page_event_on_demand_filter()\n    \n        # Step 10: Validate Drivers Page\n            print(\"\\n\" + \"-\" * 200 + \"\\n\")\n            log.info(\"\\n\" + \"-\" * 200 + \"\\n\")\n            print(f\"=====@ @ @ 👥 Validating Drivers Page for 👥: (\"+ config +\") @ @ @=====(10)\")\n            log.info(f\"=====@ @ @ 👥 Validating Drivers Page for 👥: {config} @ @ @=====(10)\")\n    \n            drivers = Fleet_DriversPage_Test()\n            drivers.driver = self.driver\n            drivers.test_drivers_page()\n            drivers.test_drivers_page_driver_list_table()\n            drivers.test_drivers_page_search_driver_opt()\n            drivers.test_drivers_page_batch_update_btn()\n            drivers.test_drivers_page_export_button()\n            drivers.test_drivers_page_add_images_option()  # Data related\n            drivers.test_drivers_page_verify_driver_name()   # Create new data\n            drivers.test_drivers_page_check_box_validation()\n            drivers.test_drivers_page_installers_tab()\n    \n        # Step 11: Validate Challenges Page\n            print(\"\\n\" + \"-\" * 200 + \"\\n\")\n            log.info(\"\\n\" + \"-\" * 200 + \"\\n\")\n            print(f\"=====@ @ @ 🏅 Validating Challenges Page for 🏅: (\"+ config +\") @ @ @=====(11)\")\n            log.info(f\"=====@ @ @ 🏅 Validating Challenges Page for 🏅: {config} @ @ @=====(11)\")\n    \n            challenges = Fleet_ChallengesPage_Test()\n            challenges.driver = self.driver\n            challenges.test_challenges_page()\n            challenges.test_challenges_page_challenged_events_table()\n    \n        # Step 12: Validate Reports Page\n            print(\"\\n\" + \"-\" * 200 + \"\\n\")\n            log.info(\"\\n\" + \"-\" * 200 + \"\\n\")\n            print(f\"=====@ @ @ 📊 Validating Reports Page for 📊: (\"+ config +\") @ @ @=====(12)\")\n            log.info(f\"=====@ @ @ 📊 Validating Reports Page for 📊: {config} @ @ @=====(12)\")\n    \n            reports = Fleet_ReportsPage_Test()\n            reports.driver = self.driver\n            reports.test_reports_page()\n            reports.test_reports_page_fleet_safety_view_report()\n            # reports.test_reports_page_fleet_safety_create_schedule_report()  # Create new data\n            # reports.test_reports_page_fleet_safety_edit_schedule_report_page()  # Edit newly created data\n            reports.test_reports_page_Coaching_session_report()\n            reports.test_reports_page_coaching_effectiveness_report()\n            reports.test_reports_page_event_list_report()    # Async Report\n            reports.test_reports_page_driver_privacy_mode_report()   # Async Report\n            reports.test_reports_page_event_count_report()   # Async Report\n            reports.test_reports_page_export_history_tab()\n            reports.test_reports_page_scheduled_tab()\n    \n        # Step 13: Validate Assets Page\n            print(\"\\n\" + \"-\" * 200 + \"\\n\")\n            log.info(\"\\n\" + \"-\" * 200 + \"\\n\")\n            print(f\"=====@ @ @ 🚚 Validating Assets Page for 🚚: (\"+ config +\") @ @ @=====(13)\")\n            log.info(f\"=====@ @ @ 🚚 Validating Assets Page for 🚚: {config} @ @ @=====(13)\")\n    \n            assets = Fleet_AssetsPage_Test()\n            assets.driver = self.driver\n            assets.test_assets_page()\n            assets.test_assets_page_overview_tab()\n            assets.test_assets_page_manage_assets_tab()\n            assets.test_assets_page_devices_tab()\n            assets.test_assets_page_diagnostics_tab()\n    \n        # Step 14: Validate Users Page\n            print(\"\\n\" + \"-\" * 200 + \"\\n\")\n            log.info(\"\\n\" + \"-\" * 200 + \"\\n\")\n            print(f\"=====@ @ @ 👤 Validating Users Page for 👤: (\"+ config +\") @ @ @=====(14)\")\n            log.info(f\"=====@ @ @ 👤 Validating Users Page for 👤: {config} @ @ @=====(14)\")\n    \n            users = Fleet_UsersPage_Test()\n            users.driver = self.driver\n            users.test_users_page()\n            users.test_users_tab()\n            # users.test_manage_users_table_data()    # Data related\n            users.test_users_page_roles_tab()\n            # users.test_manage_roles_table_data()    # Data related\n            users.test_users_page_user_activity_log_tab()\n    \n        # Step 15: Validate Configurations Page\n            print(\"\\n\" + \"-\" * 200 + \"\\n\")\n            log.info(\"\\n\" + \"-\" * 200 + \"\\n\")\n            print(f\"=====@ @ @ ⚙️ Validating Configurations Page for ⚙️: (\"+ config +\") @ @ @=====(15)\")\n            log.info(f\"=====@ @ @ ⚙️ Validating Configurations Page for ⚙️: {config} @ @ @=====(15)\")\n    \n            configurations = Fleet_ConfigurationsPage_Test()\n            configurations.driver = self.driver\n            configurations.test_configurations_page()\n            configurations.test_configurations_page_basic_configurations_table()\n            configurations.test_configurations_page_advanced_tab()\n            configurations.test_configurations_page_coaching_tab()\n            configurations.test_configurations_page_tagging_tab()\n            # configurations.test_configurations_page_add_tag()  # Data related\n            # configurations.test_configurations_page_add_attribute()  # Data related\n            configurations.test_configurations_page_entities_page()\n    \n            print(f\"🔆✅ ✅ =====@ Full suite passed for customer: (\"+ config +\") @===== ✅ ✅🔆\")\n            log.info(f\"🔆✅ ✅ =====@ Full suite passed for customer: {config} @===== ✅ ✅🔆\")\n            print(\"\\n\" + \"-\" * 200 + \"\\n\")\n            log.info(\"\\n\" + \"-\" * 200 + \"\\n\")\n    \n    \n        except Exception as e:\n            log.error(f\"❌ Full suite failed for {config}: {e}\")\n>           assert False, f\"Test failed for {config}\"\nE           AssertionError: Test failed for lmqatesting1\nE           assert False\n\ntest_Suite_Controller.py:252: AssertionError"}, "attachments": [{"name": "log", "source": "e37aeec4-ec01-495a-98b9-abe8c35c3bf3-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "c2a0a8df-c943-47b7-a2eb-0b030ada3176-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "config", "value": "'lmqatesting1'"}], "start": 1754475377840, "stop": 1754475615263, "uuid": "ff7fa051-a625-4ea6-8472-e2b682afac4f", "historyId": "e91d9151ccfac709068063b021c024ba", "testCaseId": "01e68d7add97325e369bdb9e9e1dfae7", "fullName": "test_Suite_Controller.TestSuiteController#test_run_full_suite_for_customer", "labels": [{"name": "tag", "value": "order(1)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "suite", "value": "test_Suite_Controller"}, {"name": "subSuite", "value": "TestSuiteController"}, {"name": "host", "value": "user-ThinkPad-E14-Gen-4"}, {"name": "thread", "value": "23614-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_Suite_Controller"}]}